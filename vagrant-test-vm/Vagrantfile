# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrant configuration for Ubuntu 24.04 testing VM
Vagrant.configure("2") do |config|
  # Base box - Ubuntu 24.04 LTS optimized for libvirt
  config.vm.box = "local/ubuntu-24.04-libvirt"
  config.vm.box_version = ">= 1.0.0"
  config.vm.box_check_update = true

  # VM Configuration
  config.vm.hostname = "ubuntu-test-vm"

  # Network Configuration
  config.vm.network "private_network", type: "dhcp"
  config.vm.network "forwarded_port", guest: 22, host: 2222, id: "ssh"
  config.vm.network "forwarded_port", guest: 80, host: 8080, id: "http"
  config.vm.network "forwarded_port", guest: 443, host: 8443, id: "https"

  # Shared Folders
  config.vm.synced_folder ".", "/vagrant", disabled: false
  config.vm.synced_folder "./tests", "/home/vagrant/tests", create: true
  config.vm.synced_folder "./scripts", "/home/vagrant/scripts", create: true

  # Provider-specific configuration - libvirt (KVM) primary
  config.vm.provider :libvirt do |libvirt|
    libvirt.driver = "kvm"
    libvirt.memory = 2048
    libvirt.cpus = 2
    libvirt.machine_type = "pc-q35-6.2"
    libvirt.cpu_mode = "host-passthrough"
    libvirt.nested = true
    
    # Storage optimization
    libvirt.volume_cache = "writeback"
    libvirt.disk_bus = "virtio"
    libvirt.storage :file, :size => '20G', :type => 'qcow2'
    
    # Network optimization
    libvirt.nic_model_type = "virtio"
    libvirt.graphics_type = "none"
  end

  # Provisioning Scripts
  config.vm.provision "shell", path: "scripts/provisioning/base-setup.sh"
  config.vm.provision "shell", path: "scripts/provisioning/guest-additions.sh"
  config.vm.provision "shell", path: "scripts/provisioning/development-tools.sh"

  # Final validation
  config.vm.provision "shell", inline: <<-SHELL
    echo "=== VM Provisioning Complete ==="
    echo "Hostname: $(hostname)"
    echo "OS Version: $(lsb_release -d)"
    echo "Kernel: $(uname -r)"
    echo "Memory: $(free -h | grep '^Mem' | awk '{print $2}')"
    echo "Disk Space: $(df -h / | tail -1 | awk '{print $4}' | tr -d '\\n') available"
    echo "VirtualBox Guest Additions: $(lsmod | grep vboxguest | wc -l > 0 && echo 'Installed' || echo 'Not Found')"
    echo "=== VM Ready for Testing ==="
  SHELL
end
