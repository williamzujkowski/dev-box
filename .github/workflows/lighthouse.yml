name: Lighthouse CI

on:
  push:
    branches: [main]
    paths:
      - "docs/**"
      - ".github/workflows/lighthouse.yml"
  pull_request:
    branches: [main]
    paths:
      - "docs/**"

permissions:
  contents: read
  pull-requests: write

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: |
          npm install -g @lhci/cli@0.13.x

      - name: Check for documentation package.json
        id: check-docs
        run: |
          if [ -f "docs/package.json" ]; then
            echo "docs-exists=true" >> $GITHUB_OUTPUT
          elif [ -f "docs/dev-box-site/package.json" ]; then
            echo "docs-exists=true" >> $GITHUB_OUTPUT
            echo "docs-path=docs/dev-box-site" >> $GITHUB_OUTPUT
          else
            echo "docs-exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build documentation site
        if: steps.check-docs.outputs.docs-exists == 'true'
        working-directory: ${{ steps.check-docs.outputs.docs-path || './docs' }}
        run: |
          npm ci
          npm run build

      - name: Check for built site
        id: check-site
        if: steps.check-docs.outputs.docs-exists == 'true'
        run: |
          if [ -f "docs/_site/index.html" ] || [ -f "docs/dev-box-site/_site/index.html" ]; then
            echo "site-exists=true" >> $GITHUB_OUTPUT
          else
            echo "site-exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Lighthouse CI
        if: steps.check-site.outputs.site-exists == 'true'
        run: |
          echo "Running Lighthouse CI with strict accessibility requirements..."
          lhci autorun || exit 1

      - name: Check for accessibility failures
        if: steps.check-site.outputs.site-exists == 'true'
        run: |
          if [ -f ".lighthouseci/lhr-*.json" ]; then
            echo "Lighthouse results found, analyzing accessibility scores..."
            node -e "
            const fs = require('fs');
            const glob = require('glob');
            const files = glob.sync('.lighthouseci/lhr-*.json');
            if (files.length === 0) {
              console.log('No Lighthouse results found');
              process.exit(1);
            }
            const results = JSON.parse(fs.readFileSync(files[0]));
            const accessibility = results.categories.accessibility.score;
            const performance = results.categories.performance.score;
            const bestPractices = results.categories['best-practices'].score;
            
            console.log('Scores:');
            console.log('Accessibility:', accessibility * 100 + '%');
            console.log('Performance:', performance * 100 + '%');
            console.log('Best Practices:', bestPractices * 100 + '%');
            
            if (accessibility < 0.90) {
              console.error('‚ùå Accessibility score below 90%: ' + accessibility * 100 + '%');
              process.exit(1);
            }
            if (performance < 0.85) {
              console.error('‚ùå Performance score below 85%: ' + performance * 100 + '%');
              process.exit(1);
            }
            if (bestPractices < 0.90) {
              console.error('‚ùå Best Practices score below 90%: ' + bestPractices * 100 + '%');
              process.exit(1);
            }
            console.log('‚úÖ All scores meet requirements');
            "
          else
            echo "No Lighthouse results found"
            exit 1
          fi

      - name: Comment on PR with detailed results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const glob = require('glob');
            
            try {
              const files = glob.sync('.lighthouseci/lhr-*.json');
              if (files.length === 0) {
                throw new Error('No Lighthouse results found');
              }
              
              const results = JSON.parse(fs.readFileSync(files[0]));
              const accessibility = results.categories.accessibility.score;
              const performance = results.categories.performance.score;
              const bestPractices = results.categories['best-practices'].score;
              const seo = results.categories.seo.score;
              
              const accessibilityPassed = accessibility >= 0.90;
              const performancePassed = performance >= 0.85;
              const bestPracticesPassed = bestPractices >= 0.90;
              const seoPassed = seo >= 0.90;
              
              const accessibilityIcon = accessibilityPassed ? '‚úÖ' : '‚ùå';
              const performanceIcon = performancePassed ? '‚úÖ' : '‚ùå';
              const bestPracticesIcon = bestPracticesPassed ? '‚úÖ' : '‚ùå';
              const seoIcon = seoPassed ? '‚úÖ' : '‚ö†Ô∏è';
              
              // Get specific accessibility audit failures
              const accessibilityAudits = results.audits;
              const failedAudits = [];
              
              const auditChecks = [
                'color-contrast', 'heading-order', 'html-has-lang', 'html-lang-valid',
                'image-alt', 'label', 'link-name', 'list', 'listitem', 'meta-description',
                'meta-viewport', 'document-title', 'focus-traps', 'focusable-controls',
                'interactive-element-affordance', 'logical-tab-order', 'managed-focus',
                'offscreen-content-hidden', 'use-landmarks', 'visual-order-follows-dom'
              ];
              
              auditChecks.forEach(auditKey => {
                if (accessibilityAudits[auditKey] && accessibilityAudits[auditKey].score < 1.0) {
                  failedAudits.push({
                    id: auditKey,
                    title: accessibilityAudits[auditKey].title,
                    description: accessibilityAudits[auditKey].description
                  });
                }
              });
              
              let comment = \`## üö¶ Lighthouse CI Results - WCAG 2.1 AA Compliance Check

              ### Overall Scores
              | Category | Score | Status | Threshold |
              |----------|-------|--------|-----------|
              | Accessibility | \${Math.round(accessibility * 100)}% | \${accessibilityIcon} | ‚â•90% |
              | Performance | \${Math.round(performance * 100)}% | \${performanceIcon} | ‚â•85% |
              | Best Practices | \${Math.round(bestPractices * 100)}% | \${bestPracticesIcon} | ‚â•90% |
              | SEO | \${Math.round(seo * 100)}% | \${seoIcon} | ‚â•90% |

              ### WCAG 2.1 AA Compliance Status
              \${accessibilityPassed ? '‚úÖ **PASSED** - Site meets WCAG 2.1 AA accessibility standards' : '‚ùå **FAILED** - Site does not meet WCAG 2.1 AA accessibility standards'}
              \`;
              
              if (failedAudits.length > 0) {
                comment += \`

              ### ‚ùå Failed Accessibility Audits
              \`;
                failedAudits.forEach(audit => {
                  comment += \`
              - **\${audit.title}** (\`\${audit.id}\`)
                - \${audit.description}
              \`;
                });
                
                comment += \`

              **Action Required:** Please fix the accessibility issues above before merging. These audits are required for WCAG 2.1 AA compliance.
              \`;
              }
              
              if (!accessibilityPassed || !performancePassed || !bestPracticesPassed) {
                comment += \`

              ### üö® Build Status: FAILED
              One or more critical thresholds not met. Please address the issues above.
              \`;
              } else {
                comment += \`

              ### ‚úÖ Build Status: PASSED
              All critical thresholds met successfully!
              \`;
              }

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              
            } catch (error) {
              console.error('Error processing Lighthouse results:', error);
              
              const errorComment = \`## üö¶ Lighthouse CI Results - Error

              ‚ùå **Failed to process Lighthouse results**
              
              Error: \${error.message}
              
              Please check the workflow logs for more details.
              \`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: errorComment
              });
            }
