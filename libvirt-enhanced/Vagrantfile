# -*- mode: ruby -*-
# vi: set ft=ruby :

# Enhanced Ubuntu 24.04 Development Environment with Complete Toolchain
# Includes Claude Code, GitHub CLI, Python tools, IaC tools, and linters

Vagrant.configure("2") do |config|
  # Ubuntu 24.04 LTS via hashicorp-education (libvirt compatible)
  config.vm.box = "hashicorp-education/ubuntu-24-04"
  config.vm.box_version = "0.1.0"

  # VM hostname and description
  config.vm.hostname = "dev-toolchain-ubuntu"

  # Libvirt provider configuration with enhanced settings
  config.vm.provider :libvirt do |libvirt|
    libvirt.driver = "kvm"
    libvirt.memory = 4096  # Increased for development workloads
    libvirt.cpus = 4       # More cores for compilation and tooling
    libvirt.machine_type = "pc-i440fx-2.11"
    libvirt.cpu_mode = "host-passthrough"
    libvirt.nested = true
    libvirt.volume_cache = "writeback"
    libvirt.graphics_type = "none"

    # Storage optimization
    libvirt.storage :file, :size => '40G', :type => 'qcow2'
  end

  # Network configuration with port forwarding for development services
  config.vm.network "private_network", ip: "192.168.56.100"
  config.vm.network "forwarded_port", guest: 3000, host: 3000  # React/Node.js
  config.vm.network "forwarded_port", guest: 8000, host: 8000  # Python/Django
  config.vm.network "forwarded_port", guest: 8080, host: 8080  # General web services
  config.vm.network "forwarded_port", guest: 5000, host: 5000  # Flask/API services

  # Shared folders for development
  config.vm.synced_folder ".", "/vagrant", disabled: false
  config.vm.synced_folder "../", "/home/vagrant/host-workspace", create: true

  # Development toolchain provisioning
  config.vm.provision "shell", name: "Development Toolchain Setup", inline: <<-SHELL
    set -e

    echo "🚀 Starting Ubuntu 24.04 Development Environment Setup"
    echo "===================================================="

    # Log function with timestamps
    log() {
        echo "[$(date +'%H:%M:%S')] dev-toolchain-installer: $1"
    }

    export DEBIAN_FRONTEND=noninteractive

    # 1️⃣ System Prerequisites
    log "Installing system prerequisites..."
    apt-get update -y
    apt-get install -y \
        software-properties-common \
        gnupg \
        curl \
        wget \
        apt-transport-https \
        ca-certificates \
        build-essential \
        git \
        vim \
        htop \
        unzip \
        tree \
        jq \
        shellcheck \
        yamllint

    # 2️⃣ HashiCorp Repository
    log "Setting up HashiCorp repository..."
    if [ ! -f /usr/share/keyrings/hashicorp-archive-keyring.gpg ]; then
        wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list
        apt-get update -y
    fi

    # 3️⃣ GitHub CLI Repository
    log "Setting up GitHub CLI..."
    if ! command -v gh >/dev/null 2>&1; then
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list
        apt-get update -y
        apt-get install -y gh
    fi

    # 4️⃣ Node.js 18+ Installation
    log "Installing Node.js 18+..."
    if ! node --version 2>/dev/null | grep -q "v1[89]\\|v[2-9][0-9]"; then
        curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
        apt-get install -y nodejs
    fi

    # 5️⃣ Terraform and IaC Tools
    log "Installing Infrastructure as Code tools..."
    apt-get install -y terraform

    # Install TFLint
    if ! command -v tflint >/dev/null 2>&1; then
        wget -O /tmp/tflint.zip "https://github.com/terraform-linters/tflint/releases/latest/download/tflint_linux_amd64.zip"
        unzip /tmp/tflint.zip -d /usr/local/bin/
        chmod +x /usr/local/bin/tflint
        rm /tmp/tflint.zip
    fi

    # Install tfsec
    if ! command -v tfsec >/dev/null 2>&1; then
        wget -O /usr/local/bin/tfsec "https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64"
        chmod +x /usr/local/bin/tfsec
    fi

    # 6️⃣ Container Tools
    log "Installing container linting tools..."
    if ! command -v hadolint >/dev/null 2>&1; then
        wget -O /usr/local/bin/hadolint "https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64"
        chmod +x /usr/local/bin/hadolint
    fi

    # 7️⃣ Modern CLI Tools
    log "Installing modern CLI tools..."
    apt-get install -y fd-find ripgrep bat exa

    # Create symlinks for better names
    ln -sf /usr/bin/batcat /usr/local/bin/bat 2>/dev/null || true
    ln -sf /usr/bin/fdfind /usr/local/bin/fd 2>/dev/null || true

    echo "✅ System-level tools installation complete!"
  SHELL

  # User-level provisioning (run as vagrant user)
  config.vm.provision "shell", name: "User Environment Setup", privileged: false, inline: <<-SHELL
    set -e

    echo "👤 Setting up user-level development tools..."

    # Configure npm for global installs without sudo
    mkdir -p ~/.npm-global
    npm config set prefix '~/.npm-global'
    echo 'export PATH=~/.npm-global/bin:$PATH' >> ~/.bashrc
    export PATH=~/.npm-global/bin:$PATH

    # Install Claude Code CLI
    echo "🤖 Installing Claude Code CLI..."
    npm install -g @anthropic-ai/claude-code

    # Verify Claude installation
    if command -v claude >/dev/null 2>&1; then
        echo "✅ Claude Code CLI installed successfully"
        claude doctor || echo "⚠️  Claude doctor completed with warnings"
    else
        echo "❌ Claude Code CLI installation failed"
    fi

    # Install uv (Python package installer)
    echo "🐍 Installing uv and ruff..."
    curl -LsSf https://astral.sh/uv/install.sh | sh
    export PATH="$HOME/.cargo/bin:$PATH"
    echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> ~/.bashrc

    # Install ruff via uv
    ~/.cargo/bin/uv tool install ruff

    # Install JavaScript/TypeScript development tools
    echo "📜 Installing JavaScript/TypeScript tools..."
    npm install -g \
        eslint \
        prettier \
        typescript \
        @typescript-eslint/parser \
        @typescript-eslint/eslint-plugin \
        ts-node \
        nodemon

    # Create development workspace
    mkdir -p ~/workspace
    mkdir -p ~/workspace/{python,nodejs,terraform,docker}

    # Create development environment configuration
    cat > ~/.dev-environment << 'EOF'
# Development Environment Configuration
export PATH="$HOME/.npm-global/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"
export PATH="/usr/local/bin:$PATH"

# Editor and development settings
export EDITOR=vim
export VISUAL=vim
export NODE_ENV=development
export PYTHONPATH=~/workspace:$PYTHONPATH

# Modern CLI aliases
alias cat='bat'
alias find='fd'
alias grep='rg'
alias ls='exa'
alias ll='exa -la'
alias la='exa -a'
alias tree='exa --tree'

# Development aliases
alias tf='terraform'
alias tfi='terraform init'
alias tfp='terraform plan'
alias tfa='terraform apply'
alias tfd='terraform destroy'
alias lint-py='ruff check'
alias lint-tf='tflint'
alias lint-docker='hadolint'
alias lint-shell='shellcheck'
alias format-py='ruff format'

# Git aliases
alias gst='git status'
alias gco='git checkout'
alias gaa='git add -A'
alias gcm='git commit -m'
alias gps='git push'
alias gpl='git pull'

echo "🛠️  Development environment loaded!"
EOF

    # Add to .bashrc if not already present
    if ! grep -q ".dev-environment" ~/.bashrc; then
        echo "source ~/.dev-environment" >> ~/.bashrc
    fi

    # Create validation script
    cat > ~/validate-dev-env.sh << 'EOF'
#!/bin/bash
echo "🔍 Development Environment Validation"
echo "===================================="

source ~/.dev-environment 2>/dev/null || true

tools=(
    "claude:Claude Code CLI"
    "gh:GitHub CLI"
    "terraform:Terraform"
    "tflint:TFLint"
    "tfsec:tfsec"
    "hadolint:Hadolint"
    "ruff:Ruff Python linter"
    "uv:UV Python installer"
    "node:Node.js"
    "npm:NPM"
    "eslint:ESLint"
    "prettier:Prettier"
)

passed=0
total=0

for tool_info in "${tools[@]}"; do
    tool="${tool_info%%:*}"
    description="${tool_info##*:}"
    total=$((total + 1))

    if command -v "$tool" >/dev/null 2>&1; then
        version=$(eval "$tool --version 2>/dev/null | head -1" 2>/dev/null || echo "installed")
        echo "✅ $description: $version"
        passed=$((passed + 1))
    else
        echo "❌ $description: Not available"
    fi
done

echo ""
echo "📊 Summary: $passed/$total tools ready"

if [ $passed -eq $total ]; then
    echo "🎉 Development environment fully operational!"
    exit 0
else
    echo "⚠️  Some tools missing - check installation"
    exit 1
fi
EOF

    chmod +x ~/validate-dev-env.sh

    echo "✅ User environment setup complete!"
    echo ""
    echo "🎉 Development Toolchain Installation Summary:"
    echo "============================================="
    echo "🤖 AI Tools: Claude Code CLI"
    echo "🐙 Git: GitHub CLI"
    echo "🐍 Python: uv + ruff"
    echo "🏗️  IaC: terraform + tflint + tfsec"
    echo "🐳 Container: hadolint"
    echo "📜 JavaScript: eslint + prettier + typescript"
    echo "🔧 CLI: fd, rg, bat, exa, jq, tree"
    echo ""
    echo "🚀 Quick Start:"
    echo "  vagrant ssh"
    echo "  source ~/.dev-environment"
    echo "  ~/validate-dev-env.sh"
    echo "  cd ~/workspace"
    echo ""
    echo "📡 VM IP: 192.168.121.100"
    echo "🌐 Port forwards: 3000, 5000, 8000, 8080"
  SHELL

  # Final validation
  config.vm.provision "shell", name: "Final Validation", privileged: false, inline: <<-SHELL
    echo "🧪 Running final development environment validation..."
    source ~/.dev-environment
    ~/validate-dev-env.sh
  SHELL
end
