# GitHub Actions CI configuration for comprehensive testing
# This file should be placed in .github/workflows/tests.yml

name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Quick validation job
  validate:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements-test.txt
    
    - name: Run linting
      run: python tests/run_tests.py lint
    
    - name: Run smoke tests
      run: python tests/run_tests.py smoke --verbose

  # Unit tests with coverage
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements-test.txt
        pip install -e .
    
    - name: Run unit tests
      run: python tests/run_tests.py unit --verbose
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./tests/logs/coverage.json
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload coverage HTML
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: tests/coverage_html/

  # Security tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements-test.txt
        pip install -e .
    
    - name: Run security tests
      run: python tests/run_tests.py security --verbose
    
    - name: Run Bandit security scan
      run: |
        python -m bandit -r src/ -f json -o tests/logs/bandit-report.json
        python -m bandit -r src/ -f txt
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: tests/logs/bandit-report.json

  # Integration tests (limited in CI)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [unit-tests, security-tests]
    
    services:
      # Docker service for containerized testing
      docker:
        image: docker:dind
        options: --privileged
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y virtualbox vagrant
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements-test.txt
        pip install -e .
    
    - name: Run integration tests (skip slow)
      run: python tests/run_tests.py integration --verbose --skip-slow
    
    - name: Upload test logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-logs
        path: tests/logs/

  # Performance tests (nightly only)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [unit-tests, security-tests]
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements-test.txt
        pip install -e .
    
    - name: Run performance tests
      run: python tests/run_tests.py performance --verbose --benchmark
    
    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: tests/logs/

  # Full test suite (nightly)
  full-test-suite:
    name: Full Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [unit-tests, security-tests, integration-tests]
    if: github.event_name == 'schedule'
    
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y virtualbox vagrant
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements-test.txt
        pip install -e .
    
    - name: Run full test suite
      run: python tests/run_tests.py all --verbose
    
    - name: Generate comprehensive report
      run: python tests/run_tests.py report
    
    - name: Upload comprehensive reports
      uses: actions/upload-artifact@v3
      with:
        name: full-test-reports-py${{ matrix.python-version }}
        path: tests/logs/

  # Test results summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, security-tests, integration-tests]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate test summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.unit-tests.result }}" == "success" ]; then
          echo "✅ Unit Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Unit Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security-tests.result }}" == "success" ]; then
          echo "✅ Security Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Security Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.integration-tests.result }}" == "success" ]; then
          echo "✅ Integration Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Integration Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 Detailed reports available in job artifacts" >> $GITHUB_STEP_SUMMARY

  # Deployment readiness check
  deployment-ready:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: [unit-tests, security-tests, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Check deployment readiness
      run: |
        if [ "${{ needs.unit-tests.result }}" == "success" ] && \
           [ "${{ needs.security-tests.result }}" == "success" ] && \
           [ "${{ needs.integration-tests.result }}" == "success" ]; then
          echo "🚀 All tests passed - Ready for deployment!"
          echo "DEPLOYMENT_READY=true" >> $GITHUB_ENV
        else
          echo "❌ Tests failed - Not ready for deployment"
          echo "DEPLOYMENT_READY=false" >> $GITHUB_ENV
          exit 1
        fi
    
    - name: Create deployment tag
      if: env.DEPLOYMENT_READY == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "deployment-$(date +%Y%m%d-%H%M%S)" -m "Automated deployment tag"
        git push origin --tags