# -*- mode: ruby -*-
# vi: set ft=ruby :

# Example Vagrant configurations for different development scenarios
# Copy this file to Vagrantfile and uncomment the desired configuration

# =============================================================================
# DEVELOPMENT CONFIGURATION (2GB RAM, 2 CPU)
# =============================================================================

# Vagrant.configure("2") do |config|
#   # Ubuntu 24.04 LTS local box optimized for libvirt
#   config.vm.box = "local/ubuntu-24.04-libvirt"
#   config.vm.hostname = "dev-environment"
#   
#   # Network configuration
#   config.vm.network "private_network", type: "dhcp"
#   config.vm.network "forwarded_port", guest: 3000, host: 3000, id: "dev-server"
#   config.vm.network "forwarded_port", guest: 8080, host: 8080, id: "web-server"
#   
#   config.vm.provider :libvirt do |libvirt|
#     libvirt.driver = "kvm"
#     libvirt.memory = 2048           # 2GB RAM for development
#     libvirt.cpus = 2                # 2 CPUs for basic development
#     libvirt.machine_type = "pc-q35-6.2"
#     libvirt.cpu_mode = "host-passthrough"
#     libvirt.nested = true
#     
#     # Storage optimization
#     libvirt.volume_cache = "writeback"
#     libvirt.disk_bus = "virtio"
#     libvirt.storage :file, :size => '20G', :type => 'qcow2'
#     
#     # Network optimization
#     libvirt.nic_model_type = "virtio"
#     libvirt.graphics_type = "none"
#   end
#   
#   # Development tools provisioning
#   config.vm.provision "shell", inline: <<-SHELL
#     export DEBIAN_FRONTEND=noninteractive
#     apt-get update -y
#     apt-get install -y nodejs npm python3 python3-pip git vim curl wget
#     echo "✅ Development environment ready"
#   SHELL
# end

# =============================================================================
# TESTING CONFIGURATION (4GB RAM, 4 CPU)
# =============================================================================

# Vagrant.configure("2") do |config|
#   # Ubuntu 24.04 LTS local box optimized for libvirt
#   config.vm.box = "local/ubuntu-24.04-libvirt"
#   config.vm.hostname = "test-environment"
#   
#   # Network configuration with additional ports for testing
#   config.vm.network "private_network", type: "dhcp"
#   config.vm.network "forwarded_port", guest: 3000, host: 3000, id: "dev-server"
#   config.vm.network "forwarded_port", guest: 8080, host: 8080, id: "web-server"
#   config.vm.network "forwarded_port", guest: 5000, host: 5000, id: "api-server"
#   config.vm.network "forwarded_port", guest: 9000, host: 9000, id: "test-server"
#   
#   config.vm.provider :libvirt do |libvirt|
#     libvirt.driver = "kvm"
#     libvirt.memory = 4096           # 4GB RAM for testing workloads
#     libvirt.cpus = 4                # 4 CPUs for parallel testing
#     libvirt.machine_type = "pc-q35-6.2"
#     libvirt.cpu_mode = "host-passthrough"
#     libvirt.nested = true
#     
#     # Storage optimization for testing
#     libvirt.volume_cache = "writeback"
#     libvirt.disk_bus = "virtio"
#     libvirt.storage :file, :size => '40G', :type => 'qcow2'  # More storage for test data
#     
#     # CPU topology for better testing performance
#     libvirt.numa_nodes = [
#       {
#         :cpus => "0-3",
#         :memory => "4096"
#       }
#     ]
#     
#     # Network optimization
#     libvirt.nic_model_type = "virtio"
#     libvirt.graphics_type = "none"
#   end
#   
#   # Testing environment provisioning
#   config.vm.provision "shell", inline: <<-SHELL
#     export DEBIAN_FRONTEND=noninteractive
#     apt-get update -y
#     apt-get install -y \
#       nodejs npm python3 python3-pip \
#       docker.io docker-compose \
#       git vim curl wget jq \
#       build-essential \
#       postgresql-client \
#       redis-tools
#     
#     # Install testing frameworks
#     npm install -g jest mocha cypress
#     pip3 install pytest selenium
#     
#     # Configure Docker
#     usermod -aG docker vagrant
#     systemctl enable docker
#     systemctl start docker
#     
#     echo "✅ Testing environment ready with Docker and testing frameworks"
#   SHELL
# end

# =============================================================================
# PRODUCTION-LIKE CONFIGURATION (8GB RAM, 8 CPU)
# =============================================================================

Vagrant.configure("2") do |config|
  # Ubuntu 24.04 LTS local box optimized for libvirt
  config.vm.box = "local/ubuntu-24.04-libvirt"
  config.vm.hostname = "prod-staging-environment"
  
  # Network configuration with load balancer ports
  config.vm.network "private_network", ip: "192.168.121.100"
  config.vm.network "forwarded_port", guest: 80, host: 8080, id: "http"
  config.vm.network "forwarded_port", guest: 443, host: 8443, id: "https"
  config.vm.network "forwarded_port", guest: 3000, host: 3000, id: "app-server"
  config.vm.network "forwarded_port", guest: 5432, host: 5432, id: "postgres"
  config.vm.network "forwarded_port", guest: 6379, host: 6379, id: "redis"
  config.vm.network "forwarded_port", guest: 9090, host: 9090, id: "prometheus"
  config.vm.network "forwarded_port", guest: 3001, host: 3001, id: "grafana"
  
  config.vm.provider :libvirt do |libvirt|
    libvirt.driver = "kvm"
    libvirt.memory = 8192             # 8GB RAM for production workloads
    libvirt.cpus = 8                  # 8 CPUs for high performance
    libvirt.machine_type = "pc-q35-6.2"
    libvirt.cpu_mode = "host-passthrough"
    libvirt.nested = true
    
    # High-performance storage configuration
    libvirt.volume_cache = "none"     # Direct I/O for production-like performance
    libvirt.disk_bus = "virtio"
    libvirt.storage :file, :size => '80G', :type => 'qcow2'  # Large storage for production data
    
    # Optimized CPU topology for production workloads
    libvirt.numa_nodes = [
      {
        :cpus => "0-3",
        :memory => "4096"
      },
      {
        :cpus => "4-7", 
        :memory => "4096"
      }
    ]
    
    # High-performance network configuration
    libvirt.nic_model_type = "virtio"
    libvirt.graphics_type = "none"
    libvirt.video_type = "none"
    
    # CPU pinning for better performance (optional)
    # libvirt.cputopology :sockets => '1', :cores => '4', :threads => '2'
  end
  
  # Production-like environment provisioning
  config.vm.provision "shell", name: "Production Environment Setup", inline: <<-SHELL
    set -e
    
    echo "🚀 Setting up production-like environment..."
    
    export DEBIAN_FRONTEND=noninteractive
    
    # System updates and essential packages
    apt-get update -y
    apt-get upgrade -y
    apt-get install -y \
      nodejs npm python3 python3-pip \
      docker.io docker-compose \
      nginx \
      postgresql postgresql-contrib \
      redis-server \
      git vim curl wget jq \
      build-essential \
      htop iotop \
      ufw \
      fail2ban \
      logrotate \
      rsyslog
    
    # Install monitoring tools
    apt-get install -y \
      prometheus \
      grafana \
      node-exporter \
      prometheus-node-exporter
    
    # Configure services
    systemctl enable docker nginx postgresql redis-server
    systemctl start docker nginx postgresql redis-server
    
    # Add vagrant user to docker group
    usermod -aG docker vagrant
    
    # Configure firewall (basic setup)
    ufw --force enable
    ufw allow ssh
    ufw allow 80
    ufw allow 443
    
    # Configure PostgreSQL
    sudo -u postgres createuser vagrant
    sudo -u postgres createdb vagrant
    
    # Install production npm packages globally
    npm install -g pm2 forever
    
    # Install production Python packages
    pip3 install gunicorn uwsgi supervisor
    
    # Create application directories
    mkdir -p /opt/app/{logs,data,config}
    chown -R vagrant:vagrant /opt/app
    
    # Configure log rotation
    cat > /etc/logrotate.d/app <<EOF
/opt/app/logs/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    copytruncate
}
EOF
    
    echo "✅ Production-like environment ready"
    echo "📊 Services: nginx, postgresql, redis, docker, monitoring"
    echo "🔒 Security: firewall, fail2ban configured"
    echo "📁 App directory: /opt/app"
  SHELL
  
  # Configure production monitoring
  config.vm.provision "shell", name: "Monitoring Setup", inline: <<-SHELL
    # Configure Prometheus
    systemctl enable prometheus
    systemctl start prometheus
    
    # Configure Grafana
    systemctl enable grafana-server
    systemctl start grafana-server
    
    # Configure node_exporter
    systemctl enable prometheus-node-exporter
    systemctl start prometheus-node-exporter
    
    echo "✅ Monitoring configured: Prometheus (port 9090), Grafana (port 3001)"
  SHELL
  
  # Shared folders optimized for production workloads
  config.vm.synced_folder ".", "/vagrant", type: "nfs", nfs_version: 4, nfs_udp: false
  config.vm.synced_folder "./app", "/opt/app/source", create: true, type: "nfs", nfs_version: 4
end

# =============================================================================
# MINIMAL CONFIGURATION (1GB RAM, 1 CPU)
# =============================================================================

# Vagrant.configure("2") do |config|
#   # Ubuntu 24.04 LTS local box optimized for libvirt
#   config.vm.box = "local/ubuntu-24.04-libvirt"
#   config.vm.hostname = "minimal-environment"
#   
#   # Basic network configuration
#   config.vm.network "private_network", type: "dhcp"
#   config.vm.network "forwarded_port", guest: 22, host: 2222, id: "ssh"
#   
#   config.vm.provider :libvirt do |libvirt|
#     libvirt.driver = "kvm"
#     libvirt.memory = 1024           # 1GB RAM for minimal setup
#     libvirt.cpus = 1                # 1 CPU for basic tasks
#     libvirt.machine_type = "pc-q35-6.2"
#     libvirt.cpu_mode = "host-model"
#     
#     # Minimal storage
#     libvirt.volume_cache = "writeback"
#     libvirt.disk_bus = "virtio"
#     libvirt.storage :file, :size => '10G', :type => 'qcow2'
#     
#     # Basic network
#     libvirt.nic_model_type = "virtio"
#     libvirt.graphics_type = "none"
#   end
#   
#   # Minimal provisioning
#   config.vm.provision "shell", inline: <<-SHELL
#     export DEBIAN_FRONTEND=noninteractive
#     apt-get update -y
#     apt-get install -y git vim curl wget
#     echo "✅ Minimal environment ready"
#   SHELL
# end